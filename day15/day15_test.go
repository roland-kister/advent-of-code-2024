package day15

import (
	"reflect"
	"strings"
	"testing"
)

const example = `##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`

func TestLoadInput(t *testing.T) {
	d := Day15{}
	d.LoadInput(strings.NewReader(example))

	wh := warehouse{
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '.', '.', 'O', '.', '.', 'O', '.', 'O', '#'},
		{'#', '.', '.', '.', '.', '.', '.', 'O', '.', '#'},
		{'#', '.', 'O', 'O', '.', '.', 'O', '.', 'O', '#'},
		{'#', '.', '.', 'O', '@', '.', '.', 'O', '.', '#'},
		{'#', 'O', '#', '.', '.', 'O', '.', '.', '.', '#'},
		{'#', 'O', '.', '.', 'O', '.', '.', 'O', '.', '#'},
		{'#', '.', 'O', 'O', '.', 'O', '.', 'O', 'O', '#'},
		{'#', '.', '.', '.', '.', 'O', '.', '.', '.', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
	}

	wh2 := warehouse{
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '[', ']', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '[', ']', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '[', ']', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '[', ']', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '[', ']', '@', '.', '.', '.', '.', '.', '[', ']', '.', '.', '#', '#'},
		{'#', '#', '[', ']', '#', '#', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '[', ']', '.', '.', '#', '#'},
		{'#', '#', '.', '.', '[', ']', '[', ']', '.', '.', '[', ']', '.', '.', '[', ']', '[', ']', '#', '#'},
		{'#', '#', '.', '.', '.', '.', '.', '.', '.', '.', '[', ']', '.', '.', '.', '.', '.', '.', '#', '#'},
		{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
	}

	directions := []byte{
		'<', 'v', 'v', '>', '^', '<', 'v', '^', '>', 'v', '>', '^', 'v', 'v', '^', 'v', '>', 'v', '<', '>', 'v', '^', 'v', '<', 'v', '<', '^', 'v', 'v', '<', '<', '<', '^', '>', '<', '<', '>', '<', '>', '>', 'v', '<', 'v', 'v', 'v', '<', '>', '^', 'v', '^', '>', '^', '<', '<', '<', '>', '<', '<', 'v', '<', '<', '<', 'v', '^', 'v', 'v', '^', 'v', '>', '^',
		'v', 'v', 'v', '<', '<', '^', '>', '^', 'v', '^', '^', '>', '<', '<', '>', '>', '>', '<', '>', '^', '<', '<', '>', '<', '^', 'v', 'v', '^', '^', '<', '>', 'v', 'v', 'v', '<', '>', '>', '<', '^', '^', 'v', '>', '^', '>', 'v', 'v', '<', '>', 'v', '<', '<', '<', '<', 'v', '<', '^', 'v', '>', '^', '<', '^', '^', '>', '>', '>', '^', '<', 'v', '<', 'v',
		'>', '<', '>', 'v', 'v', '>', 'v', '^', 'v', '^', '<', '>', '>', '<', '>', '>', '>', '>', '<', '^', '^', '>', 'v', 'v', '>', 'v', '<', '^', '^', '^', '>', '>', 'v', '^', 'v', '^', '<', '^', '^', '>', 'v', '^', '^', '>', 'v', '^', '<', '^', 'v', '>', 'v', '<', '>', '>', 'v', '^', 'v', '^', '<', 'v', '>', 'v', '^', '^', '<', '^', '^', 'v', 'v', '<',
		'<', '<', 'v', '<', '^', '>', '>', '^', '^', '^', '^', '>', '>', '>', 'v', '^', '<', '>', 'v', 'v', 'v', '^', '>', '<', 'v', '<', '<', '<', '>', '^', '^', '^', 'v', 'v', '^', '<', 'v', 'v', 'v', '>', '^', '>', 'v', '<', '^', '^', '^', '^', 'v', '<', '>', '^', '>', 'v', 'v', 'v', 'v', '>', '<', '>', '>', 'v', '^', '<', '<', '^', '^', '^', '^', '^',
		'^', '>', '<', '^', '>', '<', '>', '>', '>', '<', '>', '^', '^', '<', '<', '^', '^', 'v', '>', '>', '>', '<', '^', '<', 'v', '>', '^', '<', 'v', 'v', '>', '>', 'v', '>', '>', '>', '^', 'v', '>', '<', '>', '^', 'v', '>', '<', '<', '<', '<', 'v', '>', '>', 'v', '<', 'v', '<', 'v', '>', 'v', 'v', 'v', '>', '^', '<', '>', '<', '<', '>', '^', '>', '<',
		'^', '>', '>', '<', '>', '^', 'v', '<', '>', '<', '^', 'v', 'v', 'v', '<', '^', '^', '<', '>', '<', 'v', '<', '<', '<', '<', '<', '>', '<', '^', 'v', '<', '<', '<', '>', '<', '<', '<', '^', '^', '<', 'v', '<', '^', '^', '^', '>', '<', '^', '>', '>', '^', '<', 'v', '^', '>', '<', '<', '<', '^', '>', '>', '^', 'v', '<', 'v', '^', 'v', '<', 'v', '^',
		'>', '^', '>', '>', '^', 'v', '>', 'v', 'v', '>', '^', '<', '<', '^', 'v', '<', '>', '>', '<', '<', '>', '<', '<', 'v', '<', '<', 'v', '>', '<', '>', 'v', '<', '^', 'v', 'v', '<', '<', '<', '>', '^', '^', 'v', '^', '>', '^', '^', '>', '>', '>', '<', '<', '^', 'v', '>', '>', 'v', '^', 'v', '>', '<', '^', '^', '>', '>', '^', '<', '>', 'v', 'v', '^',
		'<', '>', '<', '^', '^', '>', '^', '^', '^', '<', '>', '<', 'v', 'v', 'v', 'v', 'v', '^', 'v', '<', 'v', '<', '<', '>', '^', 'v', '<', 'v', '>', 'v', '<', '<', '^', '>', '<', '<', '>', '<', '<', '>', '<', '<', '<', '^', '^', '<', '<', '<', '^', '<', '<', '>', '>', '<', '<', '>', '<', '^', '^', '^', '>', '^', '^', '<', '>', '^', '>', 'v', '<', '>',
		'^', '^', '>', 'v', 'v', '<', '^', 'v', '^', 'v', '<', 'v', 'v', '>', '^', '<', '>', '<', 'v', '<', '^', 'v', '>', '^', '^', '^', '>', '>', '>', '^', '^', 'v', 'v', 'v', '^', '>', 'v', 'v', 'v', '<', '>', '>', '>', '^', '<', '^', '>', '>', '>', '>', '>', '^', '<', '<', '^', 'v', '>', '^', 'v', 'v', 'v', '<', '>', '^', '<', '>', '<', '<', 'v', '>',
		'v', '^', '^', '>', '>', '>', '<', '<', '^', '^', '<', '>', '>', '^', 'v', '^', '<', 'v', '^', 'v', 'v', '<', '>', 'v', '^', '<', '<', '>', '^', '<', '^', 'v', '^', 'v', '>', '<', '^', '<', '<', '<', '>', '<', '<', '^', '<', 'v', '>', '<', 'v', '<', '>', 'v', 'v', '>', '>', 'v', '>', '<', 'v', '^', '<', 'v', 'v', '<', '>', 'v', '^', '<', '<', '^',
	}

	rPos := [2]int{4, 4}

	rPos2 := [2]int{4, 8}

	if !reflect.DeepEqual(d.wh, wh) {
		t.Fatalf("LoadInput() -> wh %v, want %v", d.wh, wh)
	}

	if !reflect.DeepEqual(d.rPos, rPos) {
		t.Fatalf("LoadInput() -> rPos %v, want %v", d.rPos, rPos)
	}

	if !reflect.DeepEqual(d.wh, wh) {
		t.Fatalf("LoadInput() -> wh2 %v, want %v", d.wh2, wh2)
	}

	if !reflect.DeepEqual(d.rPos2, rPos2) {
		t.Fatalf("LoadInput() -> rPos2 %v, want %v", d.rPos2, rPos2)
	}

	if !reflect.DeepEqual(d.dirs, directions) {
		t.Fatalf("LoadInput() -> directions %v, want %v", d.dirs, directions)
	}
}

func TestPartOne(t *testing.T) {
	d := Day15{}
	d.LoadInput(strings.NewReader(example))

	out := 10092
	actOut := d.PartOne()

	if out != actOut {
		t.Fatalf("PartOne() = %d, want %d", actOut, out)
	}
}

func TestPartTwo(t *testing.T) {
	d := Day15{}
	d.LoadInput(strings.NewReader(example))

	out := 9021
	actOut := d.PartTwo()

	if out != actOut {
		t.Fatalf("PartTwo() = %d, want %d", actOut, out)
	}
}
